import { useMutation, useQuery, useQueryClient, type UseQueryOptions, type UseMutationOptions } from '@tanstack/react-query';
import useSupabaseBrowser from '@/utils/supabase/browser';
import { teamsService, type TeamInsert, type TeamUpdate } from '@/utils/supabase/services';
import type { TypedSupabaseClient } from '@/utils/types';

// Define return types for better type safety
type Team = Awaited<ReturnType<typeof teamsService.getById>>;
type Teams = Awaited<ReturnType<typeof teamsService.getAll>>;
type TeamWithMembers = Awaited<ReturnType<typeof teamsService.getWithMembers>>;

export const useTeamsQueries = () => {
  const supabase = useSupabaseBrowser();
  const queryClient = useQueryClient();

  // Get all teams
  const useTeams = <TData = Teams>(
    options?: Omit<UseQueryOptions<Teams, Error, TData>, 'queryKey' | 'queryFn'>
  ) => {
    return useQuery<Teams, Error, TData>({
      queryKey: ['teams'],
      queryFn: () => teamsService.getAll(supabase),
      ...options,
    });
  };

  // Get team by ID
  const useTeam = <TData = Team>(
    teamId: string | undefined,
    options?: Omit<UseQueryOptions<Team | null, Error, TData>, 'queryKey' | 'queryFn' | 'enabled'>
  ) => {
    return useQuery<Team | null, Error, TData>({
      queryKey: ['teams', teamId],
      queryFn: () => teamId ? teamsService.getById(supabase, teamId) : null,
      enabled: !!teamId,
      ...options,
    });
  };

  // Get team with members
  const useTeamWithMembers = <TData = TeamWithMembers>(
    teamId: string | undefined,
    options?: Omit<UseQueryOptions<TeamWithMembers | null, Error, TData>, 'queryKey' | 'queryFn' | 'enabled'>
  ) => {
    return useQuery<TeamWithMembers | null, Error, TData>({
      queryKey: ['teams', teamId, 'members'],
      queryFn: () => teamId ? teamsService.getWithMembers(supabase, teamId) : null,
      enabled: !!teamId,
      ...options,
    });
  };

  // Create team mutation
  const useCreateTeam = (
    options?: Omit<UseMutationOptions<Team, Error, TeamInsert>, 'mutationFn'>
  ) => {
    return useMutation<Team, Error, TeamInsert>({
      mutationFn: (team: TeamInsert) => teamsService.create(supabase, team),
      onSuccess: (data, variables, context) => {
        queryClient.invalidateQueries({ queryKey: ['teams'] });
        options?.onSuccess?.(data, variables, context);
      },
      ...options,
    });
  };

  // Update team mutation
  const useUpdateTeam = (
    options?: Omit<UseMutationOptions<Team, Error, { teamId: string; updates: TeamUpdate }>, 'mutationFn'>
  ) => {
    return useMutation<Team, Error, { teamId: string; updates: TeamUpdate }>({
      mutationFn: ({ teamId, updates }) => teamsService.update(supabase, teamId, updates),
      onSuccess: (data, variables, context) => {
        queryClient.invalidateQueries({ queryKey: ['teams'] });
        queryClient.invalidateQueries({ queryKey: ['teams', variables.teamId] });
        queryClient.invalidateQueries({ queryKey: ['teams', variables.teamId, 'members'] });
        options?.onSuccess?.(data, variables, context);
      },
      ...options,
    });
  };

  // Delete team mutation
  const useDeleteTeam = (
    options?: Omit<UseMutationOptions<boolean, Error, string>, 'mutationFn'>
  ) => {
    return useMutation<boolean, Error, string>({
      mutationFn: (teamId: string) => teamsService.delete(supabase, teamId),
      onSuccess: (data, teamId, context) => {
        queryClient.invalidateQueries({ queryKey: ['teams'] });
        queryClient.invalidateQueries({ queryKey: ['teams', teamId] });
        queryClient.invalidateQueries({ queryKey: ['teams', teamId, 'members'] });
        options?.onSuccess?.(data, teamId, context);
      },
      ...options,
    });
  };

  return {
    useTeams,
    useTeam,
    useTeamWithMembers,
    useCreateTeam,
    useUpdateTeam,
    useDeleteTeam,
  };
};

